library("RColorBrewer")
library("DESeq2")
library("DESeq2")
library("edgeR")
library("EnhancedVolcano")
library("ape")
knitr::opts_chunk$set(echo = TRUE)
MergedGeneCounts <- read.delim("~/Downloads/rsem.merged.gene_counts.tsv")
View(MergedGeneCounts)
names(MergedGeneCounts)
?select
read.delim("~/Downloads/rsem.merged.gene_counts.tsv") %>%
select(.,-`transcript_id.s.`)
read.delim("~/Downloads/rsem.merged.gene_counts.tsv") %>%
select(.,
-`transcript_id.s.`) %>%
separate(.,
gene_id,
into = c("gene_id",
"gene_symbol"),
sep = '_')
tibble(sample_id ~ colnames(counts_table)[3:8])
tibble(sample_id = colnames(counts_table)[3:8],
treatment = factor(c(rep("code",
3),
rep("control",
3),
levels = c("control",
"code")
)
)
)
counts_table <- read.delim("~/Downloads/rsem.merged.gene_counts.tsv") %>%
select(.,
-`transcript_id.s.`) %>%
separate(.,
gene_id,
into = c("gene_id",
"gene_symbol"),
sep = '_')
tibble(sample_id = colnames(counts_table)[3:8],
treatment = factor(c(rep("code",
3),
rep("control",
3),
levels = c("control",
"code")
)
)
)
colnames(counts_table)[3:8]
factor(c(rep("code",
3),
rep("control",
3),
levels = c("control",
"code")
)
)
tibble(sample_id = colnames(counts_table)[3:8],
treatment = factor(c(rep("code",
3),
rep("control",
3)
),
levels = c("control",
"code")
)
)
sample_table <- tibble(sample_id = colnames(counts_table)[3:8],
treatment = factor(c(rep("code",
3),
rep("control",
3)
),
levels = c("control",
"code")
)
)
select(counts_table,
-gene_symbol) %>%
column_to_rownames(.,
var = "gene_id") %>%
as.matrix() %>%
round(.,
digits = 0)
counts_matrix <- select(counts_table,
-gene_symbol) %>%
column_to_rownames(.,
var = "gene_id") %>%
as.matrix() %>%
round(.,
digits = 0)
counts_dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = sample_table,
design = ~ treatment)
nrow(counts_dds)
counts_dds <- counts_dds[
rowSums(counts(counts_dds,
normalized = F)) > 0,
]
plotMDS(counts_dds)
```{r, echo=TRUE, warning=FALSE, message=TRUE, fig.height=6}
plotMDS(counts_dds)
```{r, echo=TRUE, warning=FALSE, message=TRUE, fig.height=10}
plotMDS(counts_dds)
plotMDS(counts_dds,
col = c(rep("red",3),
rep("blue",3)),
pch = 1)
counts_dds <- DESeq(counts_dds)
counts_dds <- DESeq(counts_dds)
resultsNames(counts_dds)
results(counts_dds,
name = "treatment_code_vs_control")
results(counts_dds,
name = "treatment_code_vs_control") %>%
as.data.frame() %>%
rownames_to_column(.,
var = "gene_id")
results(counts_dds,
name = "treatment_code_vs_control") %>%
as.data.frame() %>%
rownames_to_column(.,
var = "gene_id") %>%
filter(.,
padj < 0.05,
abs(log2FoldChange) > 2)
DESeq2::plotMA(results(counts_dds,
name = "treatment_code_vs_control") %>%
as.data.frame() %>%
rownames_to_column(.,
var = "gene_id") %>%
filter(.,
padj < 0.05,
abs(log2FoldChange) > 2))
DESeq2::plotMA(results(counts_dds,
name = "treatment_code_vs_control"))
result_table <- results(counts_dds,
name = "treatment_code_vs_control")
DESeq2::plotMA(result_table)
result_table <- results(counts_dds,
name = "treatment_code_vs_control")
DESeq2::plotMA(result_table)
result_table <- lfcShrink(counts_dds,
coef = "treatment_code_vs_control",
res = result_table,
type = "apeglm")
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
library("EnhancedVolcano")
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
Bioconductor::EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
EnhancedVolcano::EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
BiocManager::install("EnhancedVolcano")
EnhancedVolcano::EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
BiocManager::EnhancedVolcano::EnchancedVolcano(result_table,
BiocManager::EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
require("EnhancedVolcano")
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
library(BiocManager)
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
library("EnhancedVolcano")
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
BiocManager::install("EnhancedVolcano")
BiocManager::install("EnhancedVolcano", force = TRUE)
library("EnhancedVolcano")
EnchancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
library("EnchancedVolcano")
EnhancedVolcano(result_table,
lab = "gene_id",
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 2)
EnhancedVolcano(result_table_symbol,
lab = result_table_symbol$gene_symbol,
x = "log2FoldChange",
y = "padj",
title = "",
subtitle = "",
selectLab = c("CadN", "btv", "rho-5", "ssp3", "CLIP-190",
"nrv3", "grp", "tai", "kon",
"loqs", "fy", "Arr1", "GABPI",
"nmd", "SC35", "Tsp29Fb", "Ndf",
"Naa20B", "ATPsynG", "mtsh"),
boxedLabels = TRUE,
drawConnectors = TRUE,
pCutoff = 0.01,
FCcutoff = 2,
col = c("gray", "yellow","blue", "red"))
result_table_symbol <- result_table %>%
as.data.frame() %>%
rownames_to_column(.,
var = "gene_id") %>%
left_join(.,
select(counts_table,
gene_id,
gene_symbol)) %>%
column_to_rownames(.,
var = "gene_id")
EnhancedVolcano(result_table_symbol,
lab = result_table_symbol$gene_symbol,
x = "log2FoldChange",
y = "padj",
title = "",
subtitle = "",
selectLab = c("CadN",
"btv",
"rho-5",
"ssp3",
"CLIP-190",
"nrv3",
"grp",
"tai",
"kon",
"loqs",
"fy",
"Arr1",
"GABPI",
"nmd",
"SC35",
"Tsp29Fb",
"Ndf",
"Naa20B",
"ATPsynG",
"mtsh"),
boxedLabels = TRUE,
drawConnectors = TRUE,
pCutoff = 0.01,
FCcutoff = 2,
col = c("gray",
"yellow",
"blue",
"red"))
filter(result_table_symbol, abs(log2FoldChange) > 2, padj < 0.01) %>%
rownames_to_column(., var = "gene_id") %>%
select(., gene_id, gene_symbol) -> sig_genes
counts(counts_dds, normalized = T) %>%
as.data.frame() %>%
rownames_to_column(., var = "gene_id") %>%
left_join(., sig_genes, by = "gene_id") %>%
filter(., !is.na(gene_symbol)) %>%
column_to_rownames(., var = "gene_symbol") %>%
select(., -gene_id) %>%
rename("dmel_simRNA_case1_100kReads" = "case1",
"dmel_simRNA_case2_100kReads" = "case2",
"dmel_simRNA_case3_100kReads" = "case3",
"dmel_simRNA_control1_100kReads" = "control1",
"dmel_simRNA_control2_100kReads" = "control2",
"dmel_simRNA_control3_100kReads" = "control3") %>%
as.matrix() -> sig_heat_mat
pheatmap(log(sig_heat_mat + 1),
color = hcl.colors(9, palette = "Heat2"),
treeheight_row = 0,
treeheight_col = 0)
gc()
gc()
# load packages
library(rehh)
library(tidyverse)
# read in data for each
ST <- data2haplohh(hap_file = "~/Downloads/ShapeitOutputRinput/Daff_ST.vcf.gz",
polarize_vcf = FALSE)
SR1 <- data2haplohh(hap_file = "~/Downloads/ShapeitOutputRinput/Daff_SR1.vcf.gz",
polarize_vcf = FALSE)
SR2 <- data2haplohh(hap_file = "~/Downloads/ShapeitOutputRinput/Daff_SR2.vcf.gz",
polarize_vcf = FALSE)
ST_f <- subset(ST, min_maf = 0.05)
SR1_f <- subset(SR1, min_maf = 0.05)
SR2_f <- subset(SR2, min_maf = 0.05)
ST_scan <- scan_hh(ST_f, polarized = FALSE)
SR1_scan <- scan_hh(SR1_f, polarized = FALSE)
head(ST_scan)
SR1_f <- subset(SR1, min_maf = 0.05)
SR1_scan <- scan_hh(SR1_f, polarized = FALSE)
SR2_scan <- scan_hh(SR2_f, polarized = FALSE)
ST_ihs <- ihh2ihs(ST_scan, freqbin = 1)
SR1_ihs <- ihh2ihs(SR1_scan, freqbin = 1)
SR2_ihs <- ihh2ihs(SR2_scan, freqbin = 1)
library(ggplot2)
ggplot(ST_ihs$ihs, aes(POSITION, LOGPVALUE)) + geom_point()
ggplot(ST_ihs$ihs, aes(POSITION, IHS)) + geom_point()
ggplot(SR1_ihs$ihs, aes(POSITION, LOGPVALUE)) + geom_point()
ggplot(SR1_ihs$ihs, aes(POSITION, IHS)) + geom_point()
ggplot(SR2_ihs$ihs, aes(POSITION, LOGPVALUE)) + geom_point()
ggplot(SR2_ihs$ihs, aes(POSITION, IHS)) + geom_point()
ST_SR1_SR2 <- ies2xpehh(ST_scan, SR1_scan, SR2_scan,
popname1 = "ST", popname2 = "SR1", popname3 = "SR2",
include_freq = T)
ST_SR1 <- ies2xpehh(ST_scan, SR1_scan,
popname1 = "ST", popname2 = "SR1",
include_freq = T)
View(ST_SR1)
ST_SR2 <- ies2xpehh(ST_scan, SR2_scan,
popname1 = "ST", popname2 = "SR2",
include_freq = T)
SR1_SR2 <- ies2xpehh(SR1_scan, SR2_scan,
popname1 = "SR1", popname2 = "SR2",
include_freq = T)
# plot
ggplot(ST_SR1, aes(POSITION, XPEHH_ST_SR1)) + geom_point()
ggplot(ST_SR2, aes(POSITION, XPEHH_ST_SR2)) + geom_point()
ggplot(SR1_SR2, aes(POSITION, XPEHH_SR1_SR2)) + geom_point()
hit_ST_SR1 <- ST_SR1 %>%
arrange(desc(LOGPVALUE)) %>% top_n(1)
View(hit_ST_SR1)
hit_ST_SR2 <- ST_SR2 %>%
arrange(desc(LOGPVALUE)) %>% top_n(1)
hit_SR1_SR2 <- SR1_SR2 %>%
arrange(desc(LOGPVALUE)) %>% top_n(1)
x_ST_SR1 <- hit_ST_SR1$position
x_ST_SR2 <- hit_ST_SR2$position
x_SR1_SR2 <- hit_SR1_SR2$position
marker_id_ST_SR1 <- which(ST_f@POSITION == x_ST_SR1)
str(ST_f)
marker_id_ST_SR1 <- which(ST_f@positions == x_ST_SR1)
marker_id_ST_SR1_1 <- which(ST_f@positions == x_ST_SR1)
marker_id_ST_SR1_2 <- which(SR1_f@positions == x_ST_SR1)
hit_ST_SR1$POSITION
x_ST_SR1 <- hit_ST_SR1$POSITION
x_ST_SR2 <- hit_ST_SR2$POSITION
x_SR1_SR2 <- hit_SR1_SR2$POSITION
marker_id_ST_SR1_1 <- which(ST_f@positions == x_ST_SR1)
marker_id_ST_SR1_2 <- which(SR1_f@positions == x_ST_SR1)
marker_id_ST_SR2_1 <- which(ST_f@positions == x_ST_SR2)
marker_id_ST_SR2_2 <- which(SR2_f@positions == x_ST_SR2)
marker_id_SR1_SR2_1 <- which(SR1_f@positions == x_SR1_SR2)
marker_id_SR1_SR2_2 <- which(SR2_f@positions == x_SR1_SR2)
ST_furcation_ST_SR1 <- calc_furcation(ST_f,
mrk = marker_id_ST_SR1_1)
View(ST_furcation_ST_SR1)
ST_haplen_ST_SR1 <- calc_haplen(ST_furcation_ST_SR1)
plot(ST_haplen_ST_SR1)
SR1_furcation_ST_SR1 <- calc_furcation(SR1_f,
mrk = marker_id_ST_SR1_1)
SR1_furcation_ST_SR1 <- calc_furcation(SR1_f,
mrk = marker_id_ST_SR1_2)
SR1_haplen_ST_SR1 <- calc_haplen(SR1_furcation_ST_SR1)
plot(SR1_haplen_ST_SR1)
ST_furcation_ST_SR2 <- calc_furcation(ST_f,
mrk = marker_id_ST_SR2_1)
ST_haplen_ST_SR2 <- calc_haplen(ST_furcation_ST_SR2)
plot(ST_haplen_ST_SR2)
SR2_furcation_ST_SR2 <- calc_furcation(SR2_f,
mrk = marker_id_ST_SR2_2)
SR2_haplen_ST_SR2 <- calc_haplen(SR1_furcation_ST_SR2)
SR2_haplen_ST_SR2 <- calc_haplen(SR2_furcation_ST_SR2)
plot(SR2_haplen_ST_SR2)
SR1_furcation_SR1_SR2 <- calc_furcation(SR1_f,
mrk = marker_id_SR1_SR2_1)
SR1_haplen_SR1_SR2 <- calc_haplen(SR1_furcation_SR1_SR2)
plot(SR1_haplen_SR1_SR2)
SR2_furcation_SR1_SR2 <- calc_furcation(SR2_f,
mrk = marker_id_SR1_SR2_2)
SR2_haplen_SR1_SR2 <- calc_haplen(SR2_furcation_SR1_SR2)
plot(SR2_haplen_SR1_SR2)
ST_SR1 <- tbl_df(ST_SR1)
ST_SR1 <- tibble::as_tibble(ST_SR1)
colnames(ST_SR1) <- tolower(colnames(ST_SR1))
write_tsv(ST_SR1, "~Downloads/ShapeitOutputRinput/ST_SR1_xpEHH.tsv")
write_tsv(ST_SR1, "~/Downloads/ShapeitOutputRinput/ST_SR1_xpEHH.tsv")
ST_SR2 <- tibble::as_tibble(ST_SR2)
colnames(ST_SR2) <- tolower(colnames(ST_SR2))
write_tsv(ST_SR2, "~/Downloads/ShapeitOutputRinput/ST_SR2_xpEHH.tsv")
SR1_SR2 <- tibble::as_tibble(SR1_SR2)
colnames(SR1_SR2) <- tolower(colnames(SR1_SR2))
write_tsv(SR1_SR2, "~/Downloads/ShapeitOutputRinput/SR1_SR2_xpEHH.tsv")
#Set working directory
setwd("/Users/anjaligupta/Library/CloudStorage/GoogleDrive-anjaligupta1210@gmail.com/.shortcut-targets-by-id/0B-qq8zQGecn_Y0Y5ZENITnlUMVU/UncklessLab/Personnel/Anjali/Talks/Evol2024/DataAndCode")
#Load required packages
library(ape)
library(phangorn)
library(spatstat)
library(spatstat.geom)
library(phytools)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
EntireX<-chronos(EntireX)
plotTree(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("~/Downloads/GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.contree")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
EntireX<-chronos(EntireX)
plotTree(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
EntireX<-chronos(EntireX)
plotTree(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
nodelabels(EntireX$node.label, adj = c(1.5, -0.5), frame = "none", cex = 3, pos=1, col = "red")
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
plotTree(EntireX, type="cladogram",nodes="intermediate", alpha = .05,
type == "uniform")
plot.tree(EntireX, type="cladogram",nodes="intermediate", alpha = .05,
type == "uniform")
#Load required packages
library(ape)
library(phangorn)
library(spatstat)
library(spatstat.geom)
library(phytools)
plot.tree(EntireX, type="cladogram",nodes="intermediate", alpha = .05,
type == "uniform")
library(tree)
install.packages("tree")
library(tree)
plot.tree(EntireX, type="cladogram",nodes="intermediate", alpha = .05,
type == "uniform")
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05,
type == "uniform")
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX<-chronos(EntireX)
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
EntireX<-chronos(EntireX)
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
EntireX<-chronos(EntireX)
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
nodelabels(EntireX$node.label, adj = c(1.5, -0.5), frame = "none", cex = 3, pos=1, col = "red")
EntireX <- read.tree("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
EntireX<-chronos(EntireX)
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
plot(EntireX, type="phylogram",nodes="intermediate", alpha = .05)
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
EntireX<-chronos(EntireX)
plot(EntireX, type="phylogram",nodes="intermediate", alpha = .05)
nodelabels(EntireX$node.label, adj = c(1.5, -0.5), frame = "none", cex = 3, pos=1, col = "red")
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
plot(EntireX, type="phylogram",nodes="intermediate", alpha = .05)
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
plot(EntireX, type="phylogram",nodes="intermediate", alpha = .05)
##Autosomes
Autosomes <- phytools::read.newick("GATKfilteredSNPAutosome_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
Autosomes<-root(Autosomes,"Dpse")
plotTree(Autosomes, type="phylogram",nodes="intermediate", alpha = .05)
Autosomes<-chronos(Autosomes)
plotTree(Autosomes, type="phylogram",nodes="intermediate", alpha = .05)
nodelabels(Autosomes$node.label, adj = c(1.5, -0.5), frame = "none", cex = 3, pos=2, col = "red")
EntireX <- phytools::read.newick("GATKfilteredSNPchrX_NoAztNoBlanks.min4.phy.treefile")
#Root using pseudoobscura
EntireX<-root(EntireX,"Dpse")
EntireX<-chronos(EntireX)
plot(EntireX, type="cladogram",nodes="intermediate", alpha = .05)
nodelabels(EntireX$node.label, adj = c(1.5, -0.5), frame = "none", cex = 3, pos=1, col = "red")
plot(EntireX, type="phylogram",nodes="intermediate", alpha = .05)
